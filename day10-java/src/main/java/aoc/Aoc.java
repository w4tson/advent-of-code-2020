/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.util.*;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Aoc {
    public Integer solve(List<Integer> adaptersWithoutDevice) {
        Integer max = adaptersWithoutDevice.stream().max(Integer::compare).orElseThrow(RuntimeException::new);
        ArrayList<Integer> adapters = new ArrayList<>(adaptersWithoutDevice);
        adapters.add(max + 3);
        Collections.sort(adapters);
        adapters.forEach(System.out::println);
        HashMap<Integer, Integer> diffs = new HashMap<>();
        adapters.stream().reduce(0, (acc, item) -> {
            int diff = item - acc;
            diffs.compute(diff, (k, v) -> v == null ? 1 : v + 1);
            
            return item; 
        });

        diffs.forEach((k,v) -> {
            System.out.println(k + " -> "+ v);
        });


        return diffs.get(1) * diffs.get(3);
    }
    
    public Long part2(List<Integer> adaptersWithoutDevice) {
        Integer max = adaptersWithoutDevice.stream().max(Integer::compare).orElseThrow(RuntimeException::new);
        ArrayList<Integer> adapters = new ArrayList<>();

        adapters.add(0);
        adapters.addAll(adaptersWithoutDevice);
        adapters.add(max + 3); // add the device
        adapters.add(max + 6); // pad with data to make the algo easier
        adapters.add(max + 9);
        Collections.sort(adapters);

        System.out.println(adapters);

        ArrayList<ArrayList<Integer>> adjM = new ArrayList<>();
        
        for (int i =0; i < adapters.size()-3; i++) {
            System.out.print(adapters.get(i) + "-> ");
            ArrayList<Integer> adjacent = new ArrayList<>();
            adjacent.add(i + 1);
            System.out.print(adapters.get(i+1)+" ");
            if (within3(adapters.get(i), adapters.get(i + 2))) {
                System.out.print( adapters.get(i+ 2));
                adjacent.add((i + 2));
            }
            if (within3(adapters.get(i), adapters.get(i + 3))) {
                System.out.print(" " + adapters.get(i + 3));
                adjacent.add(i + 3);
            }
            System.out.println();
            adjM.add(adjacent);
        }
        
        long[] dp = new long[adjM.size()+1];
        dp[adjM.size()] = 1;
        

        for (int i = adjM.size() - 1; i >= 0; i--) {
            dp[i] += adjM.get(i).stream().mapToLong(j -> dp[j]).sum();
        }
        
        return dp[0];
    }
    
    private boolean within3(int a, int b) {
        return Math.abs(b-a) <= 3;
    }
}
